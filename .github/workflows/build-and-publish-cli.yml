name: Publish to npm registry

on:
  push:
    branches:
      - ci-npm
    tags:
      - 'v*'


permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Build Go binaries
        run: |
          mkdir -p bin
          
          # Build for multiple platforms
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" -o bin/container-host-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" -o bin/container-host-darwin-arm64 .
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" -o bin/container-host-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" -o bin/container-host-linux-arm64 .
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" -o bin/container-host-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" -o bin/container-host-windows-arm64.exe .
          
          # Make binaries executable
          chmod +x bin/container-host-*

      - name: Build CLI wrapper and platform packages
        run: |
          # Update main package.json version
          bun run --bun -e "
            const pkg = require('./package.json');
            const version = '${{ steps.version.outputs.VERSION }}'.replace(/^v/, '');
            pkg.version = version;
            // Update optionalDependencies versions
            Object.keys(pkg.optionalDependencies || {}).forEach(dep => {
              pkg.optionalDependencies[dep] = version;
            });
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          
          # Update platform package versions and copy binaries
          for platform_dir in platforms/*/; do
            platform=$(basename "$platform_dir")
            echo "Processing platform: $platform"
            
            # Update platform package.json version
            bun run --bun -e "
              const pkg = require('./$platform_dir/package.json');
              pkg.version = '${{ steps.version.outputs.VERSION }}'.replace(/^v/, '');
              require('fs').writeFileSync('./$platform_dir/package.json', JSON.stringify(pkg, null, 2));
            "
            
            # Create binary directory and copy appropriate binary
            mkdir -p "$platform_dir/binary"
            case "$platform" in
              darwin-x64)
                cp bin/container-host-darwin-amd64 "$platform_dir/binary/"
                ;;
              darwin-arm64)
                cp bin/container-host-darwin-arm64 "$platform_dir/binary/"
                ;;
              linux-x64)
                cp bin/container-host-linux-amd64 "$platform_dir/binary/"
                ;;
              linux-arm64)
                cp bin/container-host-linux-arm64 "$platform_dir/binary/"
                ;;
              win32-x64)
                cp bin/container-host-windows-amd64.exe "$platform_dir/binary/"
                ;;
              win32-arm64)
                cp bin/container-host-windows-arm64.exe "$platform_dir/binary/"
                ;;
            esac
          done
          
          # Build the CLI wrapper
          bun run build

      - name: Test CLI wrapper
        run: |
          # Test that the CLI builds correctly
          node dist/cli.js --help || echo "Binary not found (expected for test)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-package
          path: |
            dist/
            platforms/
            package.json
          retention-days: 30

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/ci-npm' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      id-token: write # for npm provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cli-package

      - name: Configure npm registry
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc

      - name: Publish to npm
        run: |
          # Verify package structure
          ls -la
          ls -la dist/
          ls -la platforms/
          
          # Publish platform-specific packages first
          for platform_dir in platforms/*/; do
            platform=$(basename "$platform_dir")
            echo "Publishing platform package: $platform"
            cd "$platform_dir"
            npm publish --provenance --access public
            cd ../..
          done
          
          # Publish main package last (depends on platform packages)
          echo "Publishing main package"
          npm publish --provenance --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}